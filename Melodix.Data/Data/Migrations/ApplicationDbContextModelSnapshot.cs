// <auto-generated />
using System;
using Melodix.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Melodix.Data.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumApplicationUser", b =>
                {
                    b.Property<int>("AlbumesGuardadosAlbumId")
                        .HasColumnType("int");

                    b.Property<string>("UsuariosQueLoGuardaronId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlbumesGuardadosAlbumId", "UsuariosQueLoGuardaronId");

                    b.HasIndex("UsuariosQueLoGuardaronId");

                    b.ToTable("AlbumApplicationUser");
                });

            modelBuilder.Entity("ApplicationUserPlaylist", b =>
                {
                    b.Property<int>("PlaylistsGuardadasPlaylistId")
                        .HasColumnType("int");

                    b.Property<string>("UsuariosQueLaGuardaronId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaylistsGuardadasPlaylistId", "UsuariosQueLaGuardaronId");

                    b.HasIndex("UsuariosQueLaGuardaronId");

                    b.ToTable("ApplicationUserPlaylist");
                });

            modelBuilder.Entity("Melodix.Modelos.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumId"));

                    b.Property<int>("ArtistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaLanzamiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlImagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodix.Modelos.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodix.Modelos.Artista", b =>
                {
                    b.Property<int>("ArtistaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistaId"));

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreArtistico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistaId");

                    b.ToTable("Artistas");
                });

            modelBuilder.Entity("Melodix.Modelos.Cancion", b =>
                {
                    b.Property<int>("CancionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancionId"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("ArchivoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtistaId")
                        .HasColumnType("int");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urlimagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CancionId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Canciones");
                });

            modelBuilder.Entity("Melodix.Modelos.DetallePago", b =>
                {
                    b.Property<int>("DetallePagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetallePagoId"));

                    b.Property<string>("CodigoSeguridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("int");

                    b.Property<string>("NombreTitular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vencimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetallePagoId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("DetallePagos");
                });

            modelBuilder.Entity("Melodix.Modelos.Factura", b =>
                {
                    b.Property<int>("FacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacturaId"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("SuscripcionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacturaId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Melodix.Modelos.Historial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CancionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CancionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Historiales");
                });

            modelBuilder.Entity("Melodix.Modelos.MetodoPago", b =>
                {
                    b.Property<int>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetodoPagoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodoPagos");
                });

            modelBuilder.Entity("Melodix.Modelos.Notificacion", b =>
                {
                    b.Property<int>("NotificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificacionId"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leida")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Melodix.Modelos.PerfilUsuario", b =>
                {
                    b.Property<string>("PerfilUsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("FotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerfilUsuarioId");

                    b.ToTable("PerfilUsuarios");
                });

            modelBuilder.Entity("Melodix.Modelos.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioMensual")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PlanId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Melodix.Modelos.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"));

                    b.Property<bool>("EsPrivada")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodix.Modelos.PlaylistCancion", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("CancionId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId", "CancionId");

                    b.HasIndex("CancionId");

                    b.ToTable("PlaylistCanciones");
                });

            modelBuilder.Entity("Melodix.Modelos.SeguidoresArtistas", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("UsuarioId", "ArtistaId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("SeguidoresArtistas");
                });

            modelBuilder.Entity("Melodix.Modelos.SeguidoresUsuarios", b =>
                {
                    b.Property<string>("SeguidorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeguidoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("SeguidorId", "SeguidoId");

                    b.HasIndex("SeguidoId");

                    b.ToTable("SeguidoresUsuarios");
                });

            modelBuilder.Entity("Melodix.Modelos.SolicitudMusico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Distribuidora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreArtistico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SolicitudesMusico");
                });

            modelBuilder.Entity("Melodix.Modelos.Suscripcion", b =>
                {
                    b.Property<int>("SuscripcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuscripcionId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SuscripcionId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Suscripciones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AlbumApplicationUser", b =>
                {
                    b.HasOne("Melodix.Modelos.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumesGuardadosAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsuariosQueLoGuardaronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserPlaylist", b =>
                {
                    b.HasOne("Melodix.Modelos.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsGuardadasPlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsuariosQueLaGuardaronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melodix.Modelos.Album", b =>
                {
                    b.HasOne("Melodix.Modelos.Artista", "Artista")
                        .WithMany("Albumes")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artista");
                });

            modelBuilder.Entity("Melodix.Modelos.Cancion", b =>
                {
                    b.HasOne("Melodix.Modelos.Album", "Album")
                        .WithMany("Canciones")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.Artista", "Artista")
                        .WithMany("Canciones")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artista");
                });

            modelBuilder.Entity("Melodix.Modelos.DetallePago", b =>
                {
                    b.HasOne("Melodix.Modelos.Factura", "Factura")
                        .WithMany("DetallesPago")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.MetodoPago", "MetodoPago")
                        .WithMany("DetallesPago")
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Melodix.Modelos.Factura", b =>
                {
                    b.HasOne("Melodix.Modelos.Plan", "Plan")
                        .WithMany("Facturas")
                        .HasForeignKey("PlanId");

                    b.HasOne("Melodix.Modelos.Suscripcion", "Suscripcion")
                        .WithMany("Facturas")
                        .HasForeignKey("SuscripcionId");

                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany("Facturas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Suscripcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.Historial", b =>
                {
                    b.HasOne("Melodix.Modelos.Cancion", "Cancion")
                        .WithMany("Historiales")
                        .HasForeignKey("CancionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany("Historiales")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cancion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.Notificacion", b =>
                {
                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.PerfilUsuario", b =>
                {
                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithOne("Perfil")
                        .HasForeignKey("Melodix.Modelos.PerfilUsuario", "PerfilUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.Playlist", b =>
                {
                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany("Playlists")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.PlaylistCancion", b =>
                {
                    b.HasOne("Melodix.Modelos.Cancion", "Cancion")
                        .WithMany("PlaylistCanciones")
                        .HasForeignKey("CancionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.Playlist", "Playlist")
                        .WithMany("PlaylistCanciones")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cancion");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Melodix.Modelos.SeguidoresArtistas", b =>
                {
                    b.HasOne("Melodix.Modelos.Artista", "Artista")
                        .WithMany("Seguidores")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany("SeguidoresArtistas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.SeguidoresUsuarios", b =>
                {
                    b.HasOne("Melodix.Modelos.ApplicationUser", "Seguido")
                        .WithMany("Seguidores")
                        .HasForeignKey("SeguidoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.ApplicationUser", "Seguidor")
                        .WithMany("Siguiendo")
                        .HasForeignKey("SeguidorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Seguido");

                    b.Navigation("Seguidor");
                });

            modelBuilder.Entity("Melodix.Modelos.SolicitudMusico", b =>
                {
                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.Suscripcion", b =>
                {
                    b.HasOne("Melodix.Modelos.Plan", "Plan")
                        .WithMany("Suscripciones")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodix.Modelos.ApplicationUser", "Usuario")
                        .WithMany("Suscripciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.Album", b =>
                {
                    b.Navigation("Canciones");
                });

            modelBuilder.Entity("Melodix.Modelos.ApplicationUser", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Historiales");

                    b.Navigation("Notificaciones");

                    b.Navigation("Perfil");

                    b.Navigation("Playlists");

                    b.Navigation("Seguidores");

                    b.Navigation("SeguidoresArtistas");

                    b.Navigation("Siguiendo");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Melodix.Modelos.Artista", b =>
                {
                    b.Navigation("Albumes");

                    b.Navigation("Canciones");

                    b.Navigation("Seguidores");
                });

            modelBuilder.Entity("Melodix.Modelos.Cancion", b =>
                {
                    b.Navigation("Historiales");

                    b.Navigation("PlaylistCanciones");
                });

            modelBuilder.Entity("Melodix.Modelos.Factura", b =>
                {
                    b.Navigation("DetallesPago");
                });

            modelBuilder.Entity("Melodix.Modelos.MetodoPago", b =>
                {
                    b.Navigation("DetallesPago");
                });

            modelBuilder.Entity("Melodix.Modelos.Plan", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Melodix.Modelos.Playlist", b =>
                {
                    b.Navigation("PlaylistCanciones");
                });

            modelBuilder.Entity("Melodix.Modelos.Suscripcion", b =>
                {
                    b.Navigation("Facturas");
                });
#pragma warning restore 612, 618
        }
    }
}
